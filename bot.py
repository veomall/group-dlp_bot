import logging
import os
import asyncio
import functools
import html
from dotenv import load_dotenv
from telegram import Update, InputFile
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import MessageEntityType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
from downloader import download_video

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å cookie
COOKIES_FILE = "youtube-cookies.txt"


async def link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç."""
    message = update.message
    if not message or not message.text:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    url_entities = [e for e in message.entities if e.type in (MessageEntityType.URL, MessageEntityType.TEXT_LINK)]
    if not url_entities:
        return  # –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤

    entity = url_entities[0]
    if entity.type == MessageEntityType.URL:
        url = message.text[entity.offset : entity.offset + entity.length]
    else:  # TEXT_LINK
        url = entity.url

    if not url:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å cookie
    if not os.path.exists(COOKIES_FILE):
        await message.reply_text(
            f"–û—à–∏–±–∫–∞: –§–∞–π–ª —Å cookie –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª '{COOKIES_FILE}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –±–æ—Ç."
        )
        return

    status_message = await message.reply_text("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ... ‚è≥")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        download_task = functools.partial(download_video, url=url, cookies_file=COOKIES_FILE)
        video_path, video_title = await loop.run_in_executor(None, download_task)

        if video_path and os.path.exists(video_path):
            await status_message.edit_text("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é... üöÄ")
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML-—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –∂–∏—Ä–Ω—ã–º
            escaped_title = html.escape(video_title)
            caption_html = f"<b>{escaped_title}</b>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, —É–≤–µ–ª–∏—á–∏–≤ —Ç–∞–π–º-–∞—É—Ç—ã –∏ –¥–æ–±–∞–≤–∏–≤ –∂–∏—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            with open(video_path, 'rb') as video_file:
                await message.reply_video(
                    video=video_file, 
                    caption=caption_html,
                    parse_mode='HTML', # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
                    supports_streaming=True,
                    read_timeout=60,
                    write_timeout=60
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await status_message.delete()
        else:
            await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. üòû")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {url}: {e}", exc_info=True)
        await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. ü§Ø")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'video_path' in locals() and video_path and os.path.exists(video_path):
            os.remove(video_path)
            logger.info(f"–£–¥–∞–ª–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {video_path}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
    if not TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        logger.critical("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å—Ç—Ä–æ–∫—É: TELEGRAM_BOT_TOKEN=–í–ê–®_–¢–û–ö–ï–ù")
        return

    application = Application.builder().token(TOKEN).build()

    # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫
    link_filters = filters.Entity(MessageEntityType.URL) | filters.Entity(MessageEntityType.TEXT_LINK)
    application.add_handler(MessageHandler(link_filters, link_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main() 